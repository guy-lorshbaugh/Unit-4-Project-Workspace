from collections import OrderedDict
import csv
import re
import os
import datetime

from peewee import *

inventory = SqliteDatabase('inventory.db')
stars1 = "*" * 39

def clear():
    """Clears the screen."""
    os.system("cls" if os.name == "nt" else "clear")


class Product(Model):
    product_id = AutoField(primary_key=True)
    product_name = CharField(unique=True)
    product_quantity = IntegerField(default=0, unique=False)
    product_price = IntegerField(default=0, unique=False)
    date_updated = DateField(null=True)

    class Meta:
        database = inventory


def initialize():
    """Create the database and the table if they don't already exist."""
    inventory.connect()
    inventory.create_tables([Product], safe=True)


def build_table():
    """Cleans CSV data and enters it into the database."""
    with open('inventory.csv', newline='') as inventory:
        reader = csv.reader(inventory)
        columns = next(reader)
        for row in reader:
            trim = re.compile(r'[^\d]+')
            date = datetime.datetime.strptime(row[3], "%m/%d/%Y")
            try:
                Product.create(
                        product_name=row[0],
                        product_price=trim.sub('',row[1]),
                        product_quantity=int(row[2]),
                        date_updated=date
                )
            except IntegrityError:
                prev_date = Product.select().where(Product.product_name == row[0]).get()
                if prev_date.date_updated <= date.date():
                    prev_date.product_price = trim.sub('', row[1])
                    prev_date.product_quantity = int(row[2])
                    prev_date.date_updated = date.date()
                    prev_date.save()
                else: pass

def main_menu():
    """Show the menu"""
    choice = None
    while choice != 'q':
        clear()
        print(f"""
    {stars1}
      Inventory for Mr. Storenson's Store!
    {stars1}

Please make a selection from the menu below:""")
        
        for key, value in menu.items():
            print("""
    {}) {}""".format(key, value.__doc__))
        print("""
    q) Quit\n""")
        choice = input("Your Selection:  ").lower().strip()
        if choice in menu:
            clear()
            menu[choice]()
    print(f"""
    {stars1}
         You are an Inventory Wizard!!
               Have a great day!
    {stars1}
    """)
    exit()


def view_product():
    """View information on a product"""
    clear()
    choice = 0
    again = None
    range = Product.select().order_by(Product.product_id.desc()).get()
    print(f"""
    {stars1}
            View Product Details
    {stars1}""")
    while again != "n":
        
        choice = input("""
Please enter the Product ID:  """).lower().strip()
        try:
            id = Product.select().where(Product.product_id == choice).get()
        except:
            print(f"\nSelection out of range.  There are {range} items in inventory.\n")
            choice = 0
        else:
            print(f"""
            Name:  {id.product_name}
            Price:  {id.product_price}
            {id.product_quantity} in Stock
            Entry Date: {id.date_updated}
            """)
        again = input("View another Product? (y/n)  ").lower().strip()
    
    


def add_product():
    """Add a product to the inventory"""
    again = None
    print(f"""
    {stars1}
                 Add a Product
    {stars1}
    """)
    while again != "n":
        name = input("Enter the product name:  ")
        quantity = input("Enter the number of available units:  ")
        try:
            quantity == int(quantity)
        except ValueError:
            print("\nPlease enter only numeral values for quantity.\n")
            continue
        price = input("Enter the price in cents.  (e.g., $12.99 = 1299):  ")
        try:
            price == int(price)
        except:
            print("\nPlease enter only numeral values for price.\n")
            continue
        date = datetime.datetime.now()
        try:
            Product.create(
                product_name=name,
                product_quantity=quantity,
                product_price=price,
                date_updated=date
                )
        except IntegrityError:
                prev_date = Product.select().where(Product.product_name == name).get()
                if prev_date.date_updated <= date.date():
                    prev_date.product_price = price
                    prev_date.product_quantity = quantity
                    prev_date.date_updated = date
                    prev_date.save()
                else: pass
        again = input("\n--- Inventory Updated ---\n\nAdd another item? (y/n)  ")
        print(" ")
        # Could this be DRYer if build_table() returned a [list], which a passed into function populate(table) to update the database?  Then add_product() would append [list] and call populate([list]).



def make_backup():
    """Make a backup of the inventory database"""
    pass


menu = OrderedDict([
        ('v', view_product),
        ('a', add_product),
        ('b', make_backup)
    ])

if __name__ == "__main__":
    initialize()
    build_table()
    main_menu()
